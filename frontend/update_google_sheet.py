'''Converts DB data to a sheet.'''

from typing import List, Dict
import json
from datetime import datetime

import glog

from housing.configs.config import Config, BedroomCount
from housing.data import utils as db_utils

# Sheet is just freeform celled data, not necessarily in csv format.
Sheet = List[List[str]]

AUTOGEN_DISCLAIMER = 'DO NOT EDIT! This sheet is autogenerated and all manual changes will be overwritten.'
UPDATED_AT_TS_FORMAT = '%a, %m/%d/%y %I:%M%p %Z'
SHEET_HEADERS = [
    'Address',
    'Price',
    'Bedrooms',
    'Url'
]


def _bedrooms_str(config: Config) -> str:
    result = None
    scraping_params = config.scraping_params
    min_bedrooms = scraping_params.min_bedrooms
    max_bedrooms = scraping_params.max_bedrooms
    if min_bedrooms == min_bedrooms:
        result = f'{min_bedrooms} BR'
    else:
        result = f'{min_bedrooms}-{max_bedrooms} BR'
    return result


def _price_str(config: Config) -> str:
    result = None
    scraping_params = config.scraping_params
    min_price = scraping_params.min_price
    max_price = scraping_params.max_price
    if min_price == max_price:
        result = f'${min_price}'
    else:
        result = f'${min_price}-{max_price}'
    return result


def _zipcodes_str(config: Config) -> str:
    result = None
    scraping_params = config.scraping_params
    zipcodes = scraping_params.zipcodes
    return f'zipcodes: {", ".join(zipcodes)}'


def db_to_sheet(config: Config) -> Sheet:
    '''Converts DB data for specified config to sheet data structure.'''

    db_engine = db_utils.create_db_engine()
    listings = db_utils.all_listings_data(db_engine)
    
    # Top of sheet.
    config_metadata_str = f'{_bedrooms_str(config)}; {_price_str(config)}; {_zipcodes_str(config)}'
    sheet_title_str = f'Apartments for {config.name.upper()} - {config_metadata_str}'
    updated_at_str = f'"Generated at: {datetime.now().strftime(UPDATED_AT_TS_FORMAT)}"'
    sheet_intro_data = [
        [sheet_title_str],
        [AUTOGEN_DISCLAIMER],
        [updated_at_str],
        []
    ]

    sheet_headers = [SHEET_HEADERS]

    sheet_data = []
    sorted_listing = sorted(listings, key=lambda l: l.price)
    for listing in sorted_listing:
        row = [
            f'"{listing.unit.address.to_display_string()}"',
            f'${listing.price}',
            str(listing.unit.bedrooms),
            listing.url
        ]
        sheet_data.append(row)

    sheet_data = sheet_intro_data + sheet_headers + sheet_data
    return sheet_data
    

